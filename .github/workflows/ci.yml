name: Continuous Integration - iOS

on:
  workflow_dispatch:

jobs:
  execute_test:
    runs-on: macos-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Use Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: 3.9
          cache: 'pip'

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install Appium
        run: |
          npm install -g appium
          
      - name: Install XCUITest Driver for Appium
        run: |
          appium driver install xcuitest
          
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 'latest'

      - name: Clone WebDriverAgent
        run: |
          git clone https://github.com/appium/WebDriverAgent.git
          cd WebDriverAgent
          
      - name: Accept Xcode License
        run: sudo xcodebuild -license accept
      
      # Apenas compila o WebDriverAgent para o simulador, necessÃ¡rio para o Appium
      - name: Build WebDriverAgent for Testing
        run: |
          cd WebDriverAgent
          xcodebuild -project WebDriverAgent.xcodeproj \
            -scheme WebDriverAgentRunner \
            -destination 'platform=iOS Simulator,name=iPhone 16,OS=18.0' \
            build-for-testing
            
      - name: List Available Simulators
        run: |
          xcrun simctl list devices
          
      - name: Get UDID of iPhone 16
        id: udid
        run: |
          UDID=$(xcrun simctl list devices | grep "iPhone 16" | grep -m 1 "Booted" | awk -F '[()]' '{print $2}')
          if [ -z "$UDID" ]; then
            UDID=$(xcrun simctl list devices | grep "iPhone 16" | grep -m 1 "Shutdown" | awk -F '[()]' '{print $2}')
          fi
          echo "UDID=$UDID" >> $GITHUB_ENV
          xcrun simctl boot "$UDID"
          xcrun simctl bootstatus "$UDID" -b
          sleep 120  # Tempo adicional para garantir que o simulador esteja ativo
          
      - name: Wait for Appium server
        run: |
          nohup appium -p 4725 -pa /wd/hub --log-level debug &
          sleep 30  # Aguarde para garantir que o Appium esteja rodando
          for i in {1..10}; do
            curl -s http://127.0.0.1:4725/wd/hub/status && break
            echo "Waiting for Appium server to be ready..."
            sleep 10
          done
          export UDID=${{ env.UDID }}
          robot -d reports -v UDID:${{ env.UDID }} tests/

          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: reports
          path: "**/reports/"

      - name: Implantar Resultados no Github Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: "**/reports/"
