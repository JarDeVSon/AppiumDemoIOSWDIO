name: Continuous Integration - iOS and Android

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: null

jobs:
  execute_test:
    runs-on: macos-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Use Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: 3.9
          cache: pip

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install Appium
        run: |
          npm install -g appium@latest

      - name: Install XCUITest Driver for Appium
        run: |
          appium driver install xcuitest

      - name: Install Android UIAutomator2 Driver for Appium
        run: |
          appium driver install uiautomator2

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest

      - name: Clone WebDriverAgent
        run: |
          git clone https://github.com/appium/WebDriverAgent.git
          cd WebDriverAgent

      - name: Accept Xcode License
        run: sudo xcodebuild -license accept

      - name: Build WebDriverAgent for Testing
        run: |
          cd WebDriverAgent
          xcodebuild -project WebDriverAgent.xcodeproj \
            -scheme WebDriverAgentRunner \
            -destination 'platform=iOS Simulator,name=iPhone 16,OS=18.0' \
            build-for-testing

      - name: List Available Simulators
        run: |
          xcrun simctl list devices

      - name: Get UDID of iPhone 16
        id: udid
        run: |
          UDID=$(xcrun simctl list devices | grep "iPhone 16" | grep -m 1 "Booted" | awk -F '[()]' '{print $2}')
          if [ -z "$UDID" ]; then
            UDID=$(xcrun simctl list devices | grep "iPhone 16" | grep -m 1 "Shutdown" | awk -F '[()]' '{print $2}')
          fi
          echo "UDID=$UDID" >> $GITHUB_ENV
          xcrun simctl erase "$UDID"
          xcrun simctl boot "$UDID"
          xcrun simctl bootstatus "$UDID" -b

          TIMEOUT=360  # 6 minutos
          COUNTER=0
          while ! xcrun simctl bootstatus "$UDID" -b; do
            sleep 1
            COUNTER=$((COUNTER + 1))
            if [ $COUNTER -ge $TIMEOUT ]; then
              echo "Timeout waiting for iOS simulator to boot."
              exit 1
            fi
          done
          export UDID=${{ env.UDID }}

      - name: Set up Java for Android Tests
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install Android SDK
        run: |
          brew install --cask android-commandlinetools
          yes | sdkmanager --licenses
          sdkmanager "platform-tools" "platforms;android-30" "system-images;android-30;google_apis;x86_64" "emulator"

      - name: Set ANDROID_SDK_ROOT
        run: echo "ANDROID_SDK_ROOT=$ANDROID_HOME" >> $GITHUB_ENV
        
      - name: Create AVD
        run: echo "no" | avdmanager create avd --force -n test --abi 'google_apis/x86_64' --package 'system-images;android-30;google_apis;x86_64' --device 'Nexus 6'

      - name: Start Android Emulator
        run: |
          nohup $ANDROID_HOME/emulator/emulator -avd test -no-snapshot-save -no-window -gpu off -noaudio -no-boot-anim -camera-back none &
          adb wait-for-device shell getprop sys.boot_completed || sleep 120

      # - name: Run Android Emulator
      #   uses: reactivecircus/android-emulator-runner@v2
      #   with:
      #     api-level: 30
      #     target: google_apis
      #     arch: x86_64
      #     force-avd-creation: true
      #     emulator-options: -gpu off -no-snapshot-save -no-window -noaudio -no-boot-anim -camera-back none
      #     profile: Nexus 6
      #     emulator-boot-timeout: 600
      #     script: |
      #       echo "Run Android Emulator is running....."
      #       adb wait-for-device shell getprop sys.boot_completed || sleep 120

      - name: Accept Android SDK Licenses
        run: yes | sdkmanager --licenses && sdkmanager --update

      - name: Wait for Appium server for iOS
        run: |
          nohup appium --port 4725 &> appium_ios.log &
          while ! nc -z localhost 4725; do
            echo "Waiting for Appium (iOS) to start...";
            sleep 5;
          done

      - name: Wait for Appium server for Android
        run: |
          nohup appium --port 4723 &> appium_android.log &
          while ! nc -z localhost 4723; do
            echo "Waiting for Appium (Android) to start...";
            sleep 5;
          done

      - name: Run Tests in Parallel with Pabot
        run: |
          export UDID=${{ env.UDID }}
          pabot --processes 2 \
            --variable UDID:${{ env.UDID }} \
            --outputdir reports \
            tests/ios.robot tests/android.robot

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: reports
          path: reports/

      - name: Deploy Results to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: '${{ secrets.GITHUB_TOKEN }}'
          publish_branch: gh-pages
          publish_dir: reports
