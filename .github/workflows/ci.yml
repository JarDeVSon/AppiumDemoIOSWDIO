name: Continuous Integration - iOS and Android

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: null

jobs:
  execute_test:
    runs-on: macos-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
      
      - name: Use Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: 3.9
          cache: pip

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install Appium
        run: |
          npm install -g appium@latest

      - name: Install XCUITest Driver for Appium
        run: |
          appium driver install xcuitest

      - name: Install Android UIAutomator2 Driver for Appium
        run: |
          appium driver install uiautomator2

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest

      - name: Clone WebDriverAgent
        run: |
          git clone https://github.com/appium/WebDriverAgent.git
          cd WebDriverAgent

      - name: Accept Xcode License
        run: sudo xcodebuild -license accept

      - name: Build WebDriverAgent for Testing
        run: |
          cd WebDriverAgent
          xcodebuild -project WebDriverAgent.xcodeproj \
            -scheme WebDriverAgentRunner \
            -destination 'platform=iOS Simulator,name=iPhone 16,OS=18.0' \
            build-for-testing
            
      - name: List Available Simulators
        run: |
          xcrun simctl list devices

      - name: Get UDID of iPhone 16
        id: udid
        run: |
          UDID=$(xcrun simctl list devices | grep "iPhone 16" | grep -m 1 "Booted" | awk -F '[()]' '{print $2}')
          if [ -z "$UDID" ]; then
            UDID=$(xcrun simctl list devices | grep "iPhone 16" | grep -m 1 "Shutdown" | awk -F '[()]' '{print $2}')
          fi
          echo "UDID=$UDID" >> $GITHUB_ENV
          xcrun simctl erase "$UDID"
          xcrun simctl boot "$UDID"
          xcrun simctl bootstatus "$UDID" -b
          
          # Timeout para aguardar o boot do simulador
          TIMEOUT=360  # 6 minutos
          COUNTER=0
          while ! xcrun simctl bootstatus "$UDID" -b; do
            sleep 1
            COUNTER=$((COUNTER + 1))
            if [ $COUNTER -ge $TIMEOUT ]; then
              echo "Timeout waiting for iOS simulator to boot."
              exit 1
            fi
          done

      - name: Set up Java for Android Tests
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'   
          
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Accept Android SDK Licenses
        run: yes | sdkmanager --licenses

      - name: Install Android Studio and Emulator Dependencies via Brew
        run: |
          brew install --cask android-studio
          brew install qt
          export QT_HOME=$(brew --prefix qt)
          export ANDROID_EMULATOR_QT_PATH=$(brew --prefix qt)/lib
          export PATH="$QT_HOME/bin:$PATH"

      - name: Detect Host Architecture
        id: arch
        run: |
          arch=$(uname -m)
          echo "ARCHITECTURE=$arch" >> $GITHUB_ENV

      - name: Install system image for correct architecture
        run: |
          if [ "${{ env.ARCHITECTURE }}" == "arm64" ]; then
            sdkmanager --install 'system-images;android-33;google_apis;arm64-v8a' --channel=3
          else
            sdkmanager --install 'system-images;android-33;google_apis;x86_64' --channel=3
          fi

      - name: Create AVD
        run: |
          echo "Creating AVD android_virtual_device..."
          if [ "${{ env.ARCHITECTURE }}" == "arm64" ]; then
            echo "no" | avdmanager create avd -n Nexus_6 -k "system-images;android-33;google_apis;arm64-v8a" --device "Nexus 6" --force
          else
            echo "no" | avdmanager create avd -n Nexus_6 -k "system-images;android-33;google_apis;x86_64" --device "Nexus 6" --force
          fi

      - name: Start Android Emulator
        run: |
          nohup emulator -avd Nexus_6 -port 5037 -no-window -gpu swiftshader_indirect -no-boot-anim -noaudio -no-snapshot &> emulator.log &
          
          # Verifica se o arquivo qemu-system-aarch64 existe
          if [ ! -f "$ANDROID_HOME/emulator/qemu/darwin-x86_64/qemu-system-aarch64" ]; then
            echo "QEMU executável não encontrado no caminho esperado!"
            exit 1
          fi          # Check emulator log for troubleshooting

          tail -f emulator.log &

          # Wait for emulator to fully boot
          adb kill-server
          adb start-server
          adb connect localhost:5037
          adb wait-for-device

          boot_completed=""
          timeout=360  # 6 minutos para o boot
          until [ "$boot_completed" = "1" ] || [ $timeout -le 0 ]; do
            boot_completed=$(adb shell getprop sys.boot_completed | tr -d '\r')
            echo "Waiting for emulator to complete boot... ($timeout seconds left)"
            sleep 1
            timeout=$((timeout - 1))
          done
          if [ "$boot_completed" != "1" ]; then
            echo "Emulator boot timed out"
            exit 1
          fi
          echo "Emulator boot completed successfully!"

      - name: Wait for Appium server for iOS
        run: |
          nohup appium --port 4725 &> appium_ios.log &
          # Wait for Appium iOS to be ready
          while ! nc -z localhost 4725; do
            echo "Waiting for Appium (iOS) to start...";
            sleep 5;
          done

      - name: Wait for Appium server for Android
        run: |
          nohup appium --port 4723 &> appium_android.log &
          # Wait for Appium Android to be ready
          while ! nc -z localhost 4723; do
            echo "Waiting for Appium (Android) to start...";
            sleep 5;
          done

      - name: Run Tests in Parallel with Pabot
        run: |
          export UDID=${{ env.UDID }}
          # Execute iOS tests com UDID e Android tests sem UDID
          pabot --processes 2 \
            --variable UDID:${{ env.UDID }} \
            --outputdir reports \
            tests/ios.robot tests/android.robot
            
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: reports
          path: reports/
          
      - name: Deploy Results to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: '${{ secrets.GITHUB_TOKEN }}'
          publish_branch: gh-pages
          publish_dir: reports
